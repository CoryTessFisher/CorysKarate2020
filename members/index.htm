<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="noindex, nofollow">
    <title>Password Protected Page</title>
    <style>
        html, body {
            margin: 0;
            width: 100%;
            height: 100%;
            font-family: Arial, Helvetica, sans-serif;
        }
        #dialogText {
            color: white;
            background-color: #333333;
        }
        
        #dialogWrap {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: table;
            background-color: #EEEEEE;
        }
        
        #dialogWrapCell {
            display: table-cell;
            text-align: center;
            vertical-align: middle;
        }
        
        #mainDialog {
            max-width: 400px;
            margin: 5px;
            border: solid #AAAAAA 1px;
            border-radius: 10px;
            box-shadow: 3px 3px 5px 3px #AAAAAA;
            margin-left: auto;
            margin-right: auto;
            background-color: #FFFFFF;
            overflow: hidden;
            text-align: left;
        }
        #mainDialog > * {
            padding: 10px 30px;
        }
        #passArea {
            padding: 20px 30px;
            background-color: white;
        }
        #passArea > * {
            margin: 5px auto;
        }
        #pass {
            width: 100%;
            height: 40px;
            font-size: 30px;
        }
        
        #messageWrapper {
            float: left;
            vertical-align: middle;
            line-height: 30px;
        }
        
        .notifyText {
            display: none;
        }
        
        #invalidPass {
            color: red;
        }
        
        #success {
            color: green;
        }
        
        #submitPass {
            font-size: 20px;
            border-radius: 5px;
            background-color: #E7E7E7;
            border: solid gray 1px;
            float: right;
            cursor: pointer;
        }
        #contentFrame {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        #attribution {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            text-align: center;
            padding: 10px;
            font-weight: bold;
            font-size: 0.8em;
        }
        #attribution, #attribution a {
            color: #999;
        }
        .error {
            display: none;
            color: red;
        }
    </style>
  </head>
  <body>
    <iframe id="contentFrame" frameBorder="0" allowfullscreen></iframe>
    <div id="dialogWrap">
        <div id="dialogWrapCell">
            <div id="mainDialog">
                <div id="dialogText">This page is password protected.</div>
                <div id="passArea">
                    <p id="passwordPrompt">Password</p>
                    <input id="pass" type="password" name="pass" autofocus>
                    <div>
                        <span id="messageWrapper">
                            <span id="invalidPass" class="error">Sorry, please try again.</span>
                            <span id="trycatcherror" class="error">Sorry, something went wrong.</span>
                            <span id="success" class="notifyText">Success!</span>
                            &nbsp;
                        </span>
                        <button id="submitPass" type="button">Submit</button>
                        <div style="clear: both;"></div>
                    </div>
                </div>
                <div id="securecontext" class="error">
                    <p>
                        Sorry, but password protection only works over a secure connection. Please load this page via HTTPS.
                    </p>
                </div>
                <div id="nocrypto" class="error">
                    <p>
                        Your web browser appears to be outdated. Please visit this page using a modern browser.
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div id="attribution">
        Protected by <a href="https://www.maxlaumeister.com/pagecrypt/">PageCrypt</a>
    </div>
    <script>
    (function() {

        var pl = "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";
        
        var submitPass = document.getElementById('submitPass');
        var passEl = document.getElementById('pass');
        var invalidPassEl = document.getElementById('invalidPass');
        var trycatcherror = document.getElementById('trycatcherror');
        var successEl = document.getElementById('success');
        var contentFrame = document.getElementById('contentFrame');
        
        // Sanity checks

        if (pl === "") {
            submitPass.disabled = true;
            passEl.disabled = true;
            alert("This page is meant to be used with the encryption tool. It doesn't work standalone.");
            return;
        }

        if (!isSecureContext) {
            document.querySelector("#passArea").style.display = "none";
            document.querySelector("#securecontext").style.display = "block";
            return;
        }

        if (!crypto.subtle) {
            document.querySelector("#passArea").style.display = "none";
            document.querySelector("#nocrypto").style.display = "block";
            return;
        }
        
        function str2ab(str) {
            var ustr = atob(str);
            var buf = new ArrayBuffer(ustr.length);
            var bufView = new Uint8Array(buf);
            for (var i=0, strLen=ustr.length; i < strLen; i++) {
                bufView[i] = ustr.charCodeAt(i);
            }
            return bufView;
        }

        async function deriveKey(salt, password) {
            const encoder = new TextEncoder()
            const baseKey = await crypto.subtle.importKey(
                'raw',
                encoder.encode(password),
                'PBKDF2',
                false,
                ['deriveKey'],
            )
            return await crypto.subtle.deriveKey(
                { name: 'PBKDF2', salt, iterations: 100000, hash: 'SHA-256' },
                baseKey,
                { name: 'AES-GCM', length: 256 },
                true,
                ['decrypt'],
            )
        }
        
        async function doSubmit(evt) {
            submitPass.disabled = true;
            passEl.disabled = true;

            let iv, ciphertext, key;
            
            try {
                var unencodedPl = str2ab(pl);

                const salt = unencodedPl.slice(0, 32)
                iv = unencodedPl.slice(32, 32 + 16)
                ciphertext = unencodedPl.slice(32 + 16)

                key = await deriveKey(salt, passEl.value);
            } catch (e) {
                trycatcherror.style.display = "inline";
                console.error(e);
                return;
            }

            try {
                const decryptedArray = new Uint8Array(
                    await crypto.subtle.decrypt({ name: 'AES-GCM', iv }, key, ciphertext)
                );

                let decrypted = new TextDecoder().decode(decryptedArray);

                if (decrypted === "") throw "No data returned";

                const basestr = '<base href="." target="_top">';
                const anchorfixstr = `
                    <script>
                        Array.from(document.links).forEach((anchor) => {
                            const href = anchor.getAttribute("href");
                            if (href.startsWith("#")) {
                                anchor.addEventListener("click", function(e) {
                                    e.preventDefault();
                                    const targetId = this.getAttribute("href").substring(1);
                                    const targetEl = document.getElementById(targetId);
                                    targetEl.scrollIntoView();
                                });
                            }
                        });
                    <\/script>
                `;
                
                // Set default iframe link targets to _top so all links break out of the iframe
                if (decrypted.includes("<head>")) decrypted = decrypted.replace("<head>", "<head>" + basestr);
                else if (decrypted.includes("<!DOCTYPE html>")) decrypted = decrypted.replace("<!DOCTYPE html>", "<!DOCTYPE html>" + basestr);
                else decrypted = basestr + decrypted;

                // Fix fragment links
                if (decrypted.includes("</body>")) decrypted = decrypted.replace("</body>", anchorfixstr + '</body>');
                else if (decrypted.includes("</html>")) decrypted = decrypted.replace("</html>", anchorfixstr + '</html>');
                else decrypted = decrypted + anchorfixstr;
                
                contentFrame.srcdoc = decrypted;
                
                successEl.style.display = "inline";
                setTimeout(function() {
                    dialogWrap.style.display = "none";
                }, 1000);
            } catch (e) {
                invalidPassEl.style.display = "inline";
                passEl.value = "";
                submitPass.disabled = false;
                passEl.disabled = false;
                console.error(e);
                return;
            }
        }
        
        submitPass.onclick = doSubmit;
        passEl.onkeypress = function(e){
            if (!e) e = window.event;
            var keyCode = e.keyCode || e.which;
            invalidPassEl.style.display = "none";
            if (keyCode == '13'){
              // Enter pressed
              doSubmit();
              return false;
            }
        }
    })();
    </script>
  </body>
</html>
